# importing libraries  
import numpy as nm  
import matplotlib.pyplot as mtp  
import pandas as pd  
from sklearn.tree import DecisionTreeClassifier  
from sklearn.model_selection import train_test_split  
from sklearn.preprocessing import StandardScaler    
from matplotlib.colors import ListedColormap  

#importing datasets  
data_set= pd.read_csv('user_data.csv')  
  
#Extracting Independent and dependent Variable  
X= data_set.iloc[:, [2,3]].values  
Y= data_set.iloc[:, 4].values  
  
# Splitting the dataset into training and test set.  
X_train, X_test, Y_train, Y_test= train_test_split(X, Y, test_size= 0.25, random_state=0)  
  
#feature Scaling  
st_X= StandardScaler()  
X_train= st_X.fit_transform(X_train)    
X_test= st_X.transform(X_test)  
classifier = DecisionTreeClassifier(criterion='entropy', random_state=0)  
classifier.fit(X_train, Y_train)  

#Predicting the test set result  
Y_pred= classifier.predict(X_test)  
from sklearn.metrics import confusion_matrix  
cm= confusion_matrix(Y_test, Y_pred)  
X_set, Y_set = X_train, Y_train  
X1, X2 = nm.meshgrid(nm.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step  =0.01), nm.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))  
mtp.contourf(X1, X2, classifier.predict(nm.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),  
alpha = 0.75, cmap = ListedColormap (('purple','green')))  
mtp.xlim (X1.min (), X1.max ())  
mtp.ylim (X2.min (), X2.max ())  
for i, j in enumerate(nm.unique(Y_set)):  
    mtp.scatter(X_set[Y_set == j, 0], X_set[Y_set == j, 1], color = ListedColormap(('purple', 'green'))(i), label = j)  
mtp.title('Decision Tree Algorithm (Training set)')  
mtp.xlabel('Age')  
mtp.ylabel('Estimated Salary')  
mtp.legend()  
mtp.show()  

#Visualizing the test set result  
X_set, Y_set = X_test, Y_test  
X1, X2 = nm.meshgrid(nm.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step  =0.01), nm.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))  
mtp.contourf(X1, X2, classifier.predict(nm.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),  alpha = 0.75, cmap = ListedColormap(('purple','green' )))  
mtp.xlim(X1.min (), X1.max ())  
mtp.ylim(X2.min (), X2.max ())  
for i, j in enumerate(nm.unique(Y_set)):  
    mtp.scatter(X_set[Y_set == j, 0], X_set[Y_set == j, 1],  color = ListedColormap(('purple', 'green'))(i), label = j)  
mtp.title('Decision Tree Algorithm (Test set)')  
mtp.xlabel('Age')  
mtp.ylabel('Estimated Salary')  
mtp.legend()  
mtp.show() 
