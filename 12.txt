import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Load the dataset
# Skip the header row
dataset = np.loadtxt(r"D:\Aishu\6th semester\AIML LAB\EXPT 12\diabetes.csv", delimiter=',', skiprows=1)

# Split the dataset into features and labels
X = dataset[:, 0:8]
y = dataset[:, 8]

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

accuracies = []

for i in range(5):  # Perform 5 executions
    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    # Define the neural network model
    model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(8,)),  # Input layer with shape (8,)
        tf.keras.layers.Dense(12, activation='relu'),
        tf.keras.layers.Dense(8, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    # Compile the model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=150, batch_size=10, verbose=0)

    # Evaluate the model
    _, accuracy = model.evaluate(X_test, y_test, verbose=0)
    accuracies.append(accuracy * 100)
    print("Accuracy:", accuracy * 100)

# Make predictions on some sample inputs
sample_inputs = np.array([
    [6.0, 148.0, 72.0, 35.0, 0.0, 33.6, 0.627, 50.0],
    [1.0, 85.0, 66.0, 29.0, 0.0, 26.6, 0.351, 31.0],
    [8.0, 183.0, 64.0, 0.0, 0.0, 23.3, 0.672, 32.0],
    [1.0, 89.0, 66.0, 23.0, 94.0, 28.1, 0.167, 21.0],
    [0.0, 137.0, 40.0, 35.0, 168.0, 43.1, 2.288, 33.0]
])

# Normalize the sample inputs
sample_inputs_scaled = scaler.transform(sample_inputs)

# Predict and print results
predictions = model.predict(sample_inputs_scaled)
for i in range(len(predictions)):
    print(f"{sample_inputs[i]} => {int(round(predictions[i][0]))} (expected {int(y[i])})")
